--- old/src/java.security.jgss/share/classes/sun/security/jgss/krb5/Krb5MechFactory.java	2019-10-21 14:15:12.936495357 -0500
+++ new/src/java.security.jgss/share/classes/sun/security/jgss/krb5/Krb5MechFactory.java	2019-10-21 14:15:12.940495306 -0500
@@ -32,6 +32,7 @@
 import javax.security.auth.kerberos.ServicePermission;
 import java.security.Provider;
 import java.util.Vector;
+import java.util.Map;
 
 /**
  * Krb5 Mechanism plug in for JGSS
@@ -108,9 +109,17 @@
     }
 
     public GSSCredentialSpi getCredentialElement(GSSNameSpi name,
-           int initLifetime, int acceptLifetime,
+           String password, int initLifetime, int acceptLifetime,
            int usage) throws GSSException {
 
+        if (password != null) {
+            // XXX Implement!  Shouldn't be too hard...
+            throw new GSSException(GSSException.UNAVAILABLE, -1,
+                    "The Kerberos mechanism Java implementation does not " +
+                    "currently support acquiring GSS credentials handle " +
+                    "elements with a password");
+        }
+
         if (name != null && !(name instanceof Krb5NameElement)) {
             name = Krb5NameElement.getInstance(name.toString(),
                                        name.getStringNameType());
@@ -141,6 +150,62 @@
         return credElement;
     }
 
+    public GSSCredentialSpi getCredentialElement(GSSNameSpi name,
+           Map<String,String> store, int initLifetime, int acceptLifetime,
+           int usage) throws GSSException {
+
+        if (store != null) {
+            // XXX Implement!  Shouldn't be too hard...
+            throw new GSSException(GSSException.UNAVAILABLE, -1,
+                    "The Kerberos mechanism Java implementation does not " +
+                    "currently support acquiring GSS credentials handle " +
+                    "elements using a \"credential store\"");
+        }
+
+        if (name != null && !(name instanceof Krb5NameElement)) {
+            name = Krb5NameElement.getInstance(name.toString(),
+                                       name.getStringNameType());
+        }
+
+        Krb5CredElement credElement = getCredFromSubject
+            (name, (usage != GSSCredential.ACCEPT_ONLY));
+
+        if (credElement == null) {
+            if (usage == GSSCredential.INITIATE_ONLY ||
+                usage == GSSCredential.INITIATE_AND_ACCEPT) {
+                credElement = Krb5InitCredential.getInstance
+                    (caller, (Krb5NameElement) name, initLifetime);
+                checkInitCredPermission
+                    ((Krb5NameElement) credElement.getName());
+            } else if (usage == GSSCredential.ACCEPT_ONLY) {
+                credElement =
+                    Krb5AcceptCredential.getInstance(caller,
+                                                     (Krb5NameElement) name);
+                checkAcceptCredPermission
+                    ((Krb5NameElement) credElement.getName(), name);
+            } else
+                throw new GSSException(GSSException.FAILURE, -1,
+                                       "Unknown usage mode requested");
+        }
+        return credElement;
+    }
+
+    public GSSCredentialSpi getCredentialElement(GSSNameSpi name,
+            int initLifetime, int acceptLifetime, int usage)
+        throws GSSException {
+        return getCredentialElement(name, initLifetime, acceptLifetime,
+            usage);
+    }
+
+    public void storeCredInto(GSSCredentialSpi cred, int usage,
+                              boolean overwrite, boolean defaultCred,
+                              Map<String,String> store) throws GSSException {
+        throw new GSSException(GSSException.UNAVAILABLE, -1,
+                "The Kerberos mechanism Java implementation does not " +
+                "currently support storing GSS credentials handle " +
+                "elements into a \"credential store\"");
+    }
+
     public static void checkInitCredPermission(Krb5NameElement name) {
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
@@ -153,7 +218,7 @@
                 sm.checkPermission(perm);
             } catch (SecurityException e) {
                 if (DEBUG) {
-                    System.out.println("Permission to initiate" +
+                    System.out.println("Permission to initiate " +
                         "kerberos init credential" + e.getMessage());
                 }
                 throw e;
