--- old/src/java.security.jgss/share/classes/sun/security/jgss/GSSUtil.java	2019-10-21 14:15:12.456501391 -0500
+++ new/src/java.security.jgss/share/classes/sun/security/jgss/GSSUtil.java	2019-10-21 14:15:12.464501290 -0500
@@ -120,43 +120,26 @@
                                      GSSCredential creds) {
 
         HashSet<Object> privCredentials = null;
-        HashSet<Object> pubCredentials = new HashSet<Object>(); // empty Set
+        HashSet<Object> pubCredentials = new HashSet<>(); // empty Set
 
         Set<GSSCredentialSpi> gssCredentials = null;
 
-        Set<KerberosPrincipal> krb5Principals =
-                                new HashSet<KerberosPrincipal>();
-
-        if (name instanceof GSSNameImpl) {
-            try {
-                GSSNameSpi ne = ((GSSNameImpl) name).getElement
-                    (GSS_KRB5_MECH_OID);
-                String krbName = ne.toString();
-                if (ne instanceof Krb5NameElement) {
-                    krbName =
-                        ((Krb5NameElement) ne).getKrb5PrincipalName().getName();
-                }
-                KerberosPrincipal krbPrinc = new KerberosPrincipal(krbName);
-                krb5Principals.add(krbPrinc);
-            } catch (GSSException ge) {
-                debug("Skipped name " + name + " due to " + ge);
-            }
-        }
+        Set<GSSName> names = new HashSet<>();
+        names.add(name);
 
         if (creds instanceof GSSCredentialImpl) {
             gssCredentials = ((GSSCredentialImpl) creds).getElements();
-            privCredentials = new HashSet<Object>(gssCredentials.size());
+            privCredentials = new HashSet<>(gssCredentials.size());
             populateCredentials(privCredentials, gssCredentials);
         } else {
-            privCredentials = new HashSet<Object>(); // empty Set
+            privCredentials = new HashSet<>(); // empty Set
         }
         debug("Created Subject with the following");
-        debug("principals=" + krb5Principals);
+        debug("principals=" + names);
         debug("public creds=" + pubCredentials);
         debug("private creds=" + privCredentials);
 
-        return new Subject(false, krb5Principals, pubCredentials,
-                           privCredentials);
+        return new Subject(false, names, pubCredentials, privCredentials);
 
     }
 
@@ -172,12 +155,7 @@
     private static void populateCredentials(Set<Object> credentials,
                                             Set<?> gssCredentials) {
 
-        Object cred;
-
-        Iterator<?> elements = gssCredentials.iterator();
-        while (elements.hasNext()) {
-
-            cred = elements.next();
+        for (Object cred : gssCredentials) {
 
             // Retrieve the internal cred out of SpNegoCredElement
             if (cred instanceof SpNegoCredElement) {
@@ -321,30 +299,41 @@
                     public Vector<T> run() throws Exception {
                         Subject accSubj = Subject.getSubject(acc);
                         Vector<T> result = null;
-                        if (accSubj != null) {
-                            result = new Vector<T>();
-                            Iterator<GSSCredentialImpl> iterator =
-                                accSubj.getPrivateCredentials
-                                (GSSCredentialImpl.class).iterator();
-                            while (iterator.hasNext()) {
-                                GSSCredentialImpl cred = iterator.next();
-                                debug("...Found cred" + cred);
-                                try {
-                                    GSSCredentialSpi ce =
-                                        cred.getElement(mech, initiate);
-                                    debug("......Found element: " + ce);
-                                    if (ce.getClass().equals(credCls) &&
-                                        (name == null ||
-                                         name.equals((Object) ce.getName()))) {
+                        if (accSubj == null) {
+                            debug("No Subject");
+                            return result;
+                        }
+
+                        result = new Vector<T>();
+                        for (GSSCredentialImpl cred : accSubj.getPrivateCredentials
+                                                      (GSSCredentialImpl.class)) {
+                            debug("...Found cred" + cred);
+                            try {
+                                GSSCredentialSpi ce =
+                                    cred.getElement(mech, initiate);
+                                debug("......Found element: " + ce);
+                                if (!ce.getClass().equals(credCls)) {
+                                    debug("......Discard element (class mismatch)");
+                                } else if (name == null) {
+                                    /*
+                                     * If the caller doesn't care about
+                                     * the specific name, then prefer
+                                     * default credentials to
+                                     * non-default credentials.
+                                     */
+                                    if (ce.isDefaultCredential())
+                                        result.add(0, credCls.cast(ce));
+                                    else
                                         result.add(credCls.cast(ce));
-                                    } else {
-                                        debug("......Discard element");
-                                    }
-                                } catch (GSSException ge) {
-                                    debug("...Discard cred (" + ge + ")");
+                                } else if (name.equals((Object) ce.getName())) {
+                                    result.add(credCls.cast(ce));
+                                } else {
+                                    debug("......Discard element (name mismatch)");
                                 }
+                            } catch (GSSException ge) {
+                                debug("...Discard cred (exception: " + ge + ")");
                             }
-                        } else debug("No Subject");
+                        }
                         return result;
                     }
                 });
