--- old/src/java.security.jgss/share/classes/sun/security/jgss/wrapper/NativeGSSContext.java	2019-10-21 14:15:14.212479315 -0500
+++ new/src/java.security.jgss/share/classes/sun/security/jgss/wrapper/NativeGSSContext.java	2019-10-21 14:15:14.216479265 -0500
@@ -75,8 +75,8 @@
     private int lifetime = GSSCredential.DEFAULT_LIFETIME;
     private final GSSLibStub cStub;
 
-    private boolean skipDelegPermCheck;
-    private boolean skipServicePermCheck;
+    private boolean skipDelegPermCheck = false;
+    private boolean skipServicePermCheck = false;
 
     // Retrieve the (preferred) mech out of SPNEGO tokens, i.e.
     // NegTokenInit & NegTokenTarg
@@ -111,26 +111,20 @@
     // Perform the Service permission check
     private void doServicePermCheck() throws GSSException {
         if (System.getSecurityManager() != null) {
-            String action = (isInitiator? "initiate" : "accept");
-            // Need to check Service permission for accessing
-            // initiator cred for SPNEGO during context establishment
-            if (GSSUtil.isSpNegoMech(cStub.getMech()) && isInitiator
-                && !isEstablished) {
-                if (srcName == null) {
-                    // Check by creating default initiator KRB5 cred
-                    GSSCredElement tempCred =
-                        new GSSCredElement(null, lifetime,
-                                           GSSCredential.INITIATE_ONLY,
-                                           GSSLibStub.getInstance(GSSUtil.GSS_KRB5_MECH_OID));
-                    tempCred.dispose();
-                } else {
+            try {
+                if (isInitiator && srcName != null) {
                     String tgsName = Krb5Util.getTGSName(srcName);
-                    Krb5Util.checkServicePermission(tgsName, action);
+                    Krb5Util.checkServicePermission(tgsName, "initiate");
+                    skipServicePermCheck = true;
+                } else if (!isInitiator && targetName != null) {
+                    String targetStr = targetName.getKrbName();
+                    Krb5Util.checkServicePermission(targetStr, "accept");
+                    skipServicePermCheck = true;
                 }
+            } catch (GSSException ge) {
+                dispose();
+                throw ge;
             }
-            String targetStr = targetName.getKrbName();
-            Krb5Util.checkServicePermission(targetStr, action);
-            skipServicePermCheck = true;
         }
     }
 
@@ -138,6 +132,8 @@
     private void doDelegPermCheck() throws GSSException {
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
+            if (targetName == null)
+                return;
             String targetStr = targetName.getKrbName();
             String tgsStr = Krb5Util.getTGSName(targetName);
             StringBuilder sb = new StringBuilder("\"");
@@ -200,13 +196,13 @@
         lifetime = time;
 
         if (GSSUtil.isKerberosMech(cStub.getMech())) {
-            doServicePermCheck();
             if (cred == null) {
                 disposeCred = cred =
                     new GSSCredElement(null, lifetime,
                             GSSCredential.INITIATE_ONLY, cStub);
             }
             srcName = cred.getName();
+            doServicePermCheck();
         }
     }
 
@@ -241,15 +237,22 @@
         if (info.length != NUM_OF_INQUIRE_VALUES) {
             throw new RuntimeException("Bug w/ GSSLibStub.inquireContext()");
         }
-        srcName = new GSSNameElement(info[0], cStub);
-        targetName = new GSSNameElement(info[1], cStub);
         isInitiator = (info[2] != 0);
         isEstablished = (info[3] != 0);
         flags = (int) info[4];
         lifetime = (int) info[5];
+        if (isEstablished) {
+            srcName = new GSSNameElement(info[0], actualMech, cStub);
+            targetName = new GSSNameElement(info[1], actualMech, cStub);
+        } else {
+            srcName = null;
+            targetName = null;
+        }
 
         // Do Service Permission check when importing SPNEGO context
-        // just to be safe
+        // just to be safe.  WAT, no.  If the caller has an exported sec
+        // context token, it's because someone gave it to it, therefore there's
+        // no need to do any further permission checking.  REMOVE!
         Oid mech = cStub.getMech();
         if (GSSUtil.isSpNegoMech(mech) || GSSUtil.isKerberosMech(mech)) {
             doServicePermCheck();
@@ -286,26 +289,40 @@
 
             // Only inspect the token when the permission check
             // has not been performed
-            if (GSSUtil.isSpNegoMech(cStub.getMech()) && outToken != null) {
+            if (!GSSUtil.isSpNegoMech(cStub.getMech())) {
+                actualMech = cStub.getMech();
+            } else if (actualMech == null && outToken != null) {
                 // WORKAROUND for SEAM bug#6287358
-                actualMech = getMechFromSpNegoToken(outToken, true);
-
-                if (GSSUtil.isKerberosMech(actualMech)) {
-                    if (!skipServicePermCheck) doServicePermCheck();
-                    if (!skipDelegPermCheck) doDelegPermCheck();
-                }
+                //
+                // This is where some C GSS SPNEGO implementations fail to make
+                // the real actual mechanism available.
+                // getMechFromSpNegoToken() does the horrible, no good, very
+                // bad thing its name says it does.  For now we retain this bit
+                // of evil.
+                //
+                // XXX Time to remove this workaround.  It's been 20
+                // years.
+                try {
+                    actualMech = getMechFromSpNegoToken(outToken, true);
+                } catch (GSSException e) { }
+            }
+
+            if (actualMech != null && GSSUtil.isKerberosMech(actualMech)) {
+                if (!skipServicePermCheck) doServicePermCheck();
+                if (!skipDelegPermCheck) doDelegPermCheck();
             }
 
             if (isEstablished) {
+                // XXX We should attempt to get actualMech from the cStub here,
+                // and take it even if we got a semblance of an actualMech from
+                // the SPNEGO token, as long as the one returned by the cStub
+                // isn't the SPNEGO OID.
                 if (srcName == null) {
                     srcName = new GSSNameElement
-                        (cStub.getContextName(pContext, true), cStub);
-                }
-                if (cred == null) {
-                    disposeCred = cred =
-                        new GSSCredElement(srcName, lifetime,
-                                GSSCredential.INITIATE_ONLY, cStub);
+                        (cStub.getContextName(pContext, true), actualMech,
+                         cStub);
                 }
+                if (!skipServicePermCheck) doServicePermCheck();
             }
         }
         return outToken;
@@ -324,27 +341,18 @@
             SunNativeProvider.debug("acceptSecContext=> outToken len=" +
                                     (outToken == null? 0 : outToken.length));
 
-            if (targetName == null) {
+            if (isEstablished && targetName == null) {
                 targetName = new GSSNameElement
-                    (cStub.getContextName(pContext, false), cStub);
-                // Replace the current default acceptor cred now that
-                // the context acceptor name is available
-                if (disposeCred != null) {
-                    disposeCred.dispose();
-                }
-                disposeCred = cred =
-                    new GSSCredElement(targetName, lifetime,
-                            GSSCredential.ACCEPT_ONLY, cStub);
+                    (cStub.getContextName(pContext, false), actualMech, cStub);
             }
-
-            // Only inspect token when the permission check has not
-            // been performed
-            if (GSSUtil.isSpNegoMech(cStub.getMech()) &&
-                (outToken != null) && !skipServicePermCheck) {
-                if (GSSUtil.isKerberosMech(getMechFromSpNegoToken
-                                           (outToken, false))) {
-                    doServicePermCheck();
-                }
+            if (GSSUtil.isSpNegoMech(cStub.getMech()) && outToken != null &&
+                actualMech == null) {
+                try {
+                    actualMech = getMechFromSpNegoToken(outToken, true);
+                } catch (GSSException e) { }
+            }
+            if (isEstablished && targetName != null && !skipServicePermCheck) {
+                doServicePermCheck();
             }
         }
         return outToken;
