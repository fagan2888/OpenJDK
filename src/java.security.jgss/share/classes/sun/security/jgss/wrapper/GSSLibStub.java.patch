--- old/src/java.security.jgss/share/classes/sun/security/jgss/wrapper/GSSLibStub.java	2019-10-21 14:15:13.968482383 -0500
+++ new/src/java.security.jgss/share/classes/sun/security/jgss/wrapper/GSSLibStub.java	2019-10-21 14:15:13.972482333 -0500
@@ -25,6 +25,8 @@
 
 package sun.security.jgss.wrapper;
 
+import java.util.Map;
+import java.util.ArrayList;
 import java.util.Hashtable;
 import org.ietf.jgss.Oid;
 import org.ietf.jgss.GSSName;
@@ -65,11 +67,15 @@
     native boolean compareName(long pName1, long pName2);
     native long canonicalizeName(long pName);
     native byte[] exportName(long pName) throws GSSException;
+    native String localName(long pName, Oid mech) throws GSSException;
     native Object[] displayName(long pName) throws GSSException;
 
     // Credential related routines
-    native long acquireCred(long pName, int lifetime, int usage)
-                                        throws GSSException;
+    native long acquireCred(long pName, String password, String[] store,
+                            int lifetime, int usage) throws GSSException;
+    native long storeCred(long pCred, int usage, Oid mech,
+                          boolean overwrite, boolean defaultCred,
+                          String[] store) throws GSSException;
     native long releaseCred(long pCred);
     native long getCredName(long pCred);
     native int getCredTime(long pCred);
@@ -110,6 +116,27 @@
         this.mech = mech;
         this.pMech = getMechPtr(mech.getDER());
     }
+    private static String[] map2array(Map<String,String> m) {
+        if (m == null)
+            return null;
+        ArrayList<String> l = new ArrayList<String>();
+        for (var e : m.entrySet()) {
+            l.add(e.getKey());
+            l.add(e.getValue());
+        }
+        return l.toArray(new String[0]);
+    }
+    public long acquireCred(long pName, String password,
+                            Map<String,String> store,
+                            int lifetime, int usage) throws GSSException {
+        return acquireCred(pName, password, map2array(store), lifetime, usage);
+    }
+    public long storeCred(long pCred, int usage, Oid mech,
+                          boolean overwrite, boolean defaultCred,
+                          Map<String,String> store) throws GSSException {
+        return storeCred(pCred, usage, mech, overwrite, defaultCred,
+            map2array(store));
+    }
     public boolean equals(Object obj) {
         if (obj == this) return true;
         if (!(obj instanceof GSSLibStub)) {
