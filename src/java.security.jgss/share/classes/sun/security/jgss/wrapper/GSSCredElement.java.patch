--- old/src/java.security.jgss/share/classes/sun/security/jgss/wrapper/GSSCredElement.java	2019-10-21 14:15:13.848483891 -0500
+++ new/src/java.security.jgss/share/classes/sun/security/jgss/wrapper/GSSCredElement.java	2019-10-21 14:15:13.852483841 -0500
@@ -26,6 +26,9 @@
 
 import org.ietf.jgss.*;
 import java.security.Provider;
+import java.util.Map;
+import java.util.List;
+import java.util.ArrayList;
 import sun.security.jgss.GSSUtil;
 import sun.security.jgss.spi.GSSCredentialSpi;
 import sun.security.jgss.spi.GSSNameSpi;
@@ -42,9 +45,14 @@
     long pCred; // Pointer to the gss_cred_id_t structure
     private GSSNameElement name = null;
     private GSSLibStub cStub;
+    public boolean isDefCred;
 
     // Perform the necessary ServicePermission check on this cred
+    // FIXME Don't use any Krb5-specific code here.
     void doServicePermCheck() throws GSSException {
+        // FIXME We need only do this check in initSecContext() and
+        // acceptSecContext(), so gut this here, and never ever do the
+        // Krb5Util.getTGSName(name) check.
         if (GSSUtil.isKerberosMech(cStub.getMech())) {
             if (System.getSecurityManager() != null) {
                 if (isInitiatorCredential()) {
@@ -69,22 +77,49 @@
         name = srcName;
     }
 
-    GSSCredElement(GSSNameElement name, int lifetime, int usage,
-                   GSSLibStub stub) throws GSSException {
+    private GSSCredElement(GSSNameElement name, String password,
+                           Map<String,String> store, int lifetime, int usage,
+                           GSSLibStub stub) throws GSSException {
         cStub = stub;
         this.usage = usage;
 
         if (name != null) { // Could be GSSNameElement.DEF_ACCEPTOR
             this.name = name;
             doServicePermCheck();
-            pCred = cStub.acquireCred(this.name.pName, lifetime, usage);
+            pCred = cStub.acquireCred(this.name.pName, password, store,
+                lifetime, usage);
+            if (name == GSSNameElement.DEF_ACCEPTOR)
+                isDefCred = true;
         } else {
-            pCred = cStub.acquireCred(0, lifetime, usage);
-            this.name = new GSSNameElement(cStub.getCredName(pCred), cStub);
+            pCred = cStub.acquireCred(0, password, store, lifetime, usage);
+            this.name = new GSSNameElement(cStub.getCredName(pCred), cStub.getMech(), cStub);
             doServicePermCheck();
+            isDefCred = true;
         }
     }
 
+    GSSCredElement(GSSNameElement name, Map<String,String> store, int lifetime,
+                   int usage, GSSLibStub stub) throws GSSException {
+        this(name, (String)null, store, lifetime, usage, stub);
+    }
+
+    GSSCredElement(GSSNameElement name, String password, int lifetime,
+                   int usage, GSSLibStub stub) throws GSSException {
+        this(name, password, (Map<String,String>)null, lifetime, usage, stub);
+    }
+
+    GSSCredElement(GSSNameElement name, int lifetime, int usage,
+                   GSSLibStub stub) throws GSSException {
+        this(name, (String)null, lifetime, usage, stub);
+    }
+
+    public void storeInto(int usage, boolean overwrite, boolean defaultCred,
+                          Map<String,String> store)
+            throws GSSException {
+        cStub.storeCred(pCred, usage, getMechanism(), overwrite,
+                        defaultCred, store);
+    }
+
     public Provider getProvider() {
         return SunNativeProvider.INSTANCE;
     }
@@ -125,6 +160,10 @@
         return cStub.getMech();
     }
 
+    public boolean isDefaultCredential() {
+        return isDefCred;
+    }
+
     public String toString() {
         // No hex bytes available for native impl
         return "N/A";
