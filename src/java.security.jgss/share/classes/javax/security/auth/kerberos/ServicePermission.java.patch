--- old/src/java.security.jgss/share/classes/javax/security/auth/kerberos/ServicePermission.java	2019-10-21 14:15:11.600512152 -0500
+++ new/src/java.security.jgss/share/classes/javax/security/auth/kerberos/ServicePermission.java	2019-10-21 14:15:11.604512102 -0500
@@ -214,10 +214,57 @@
 
 
     boolean impliesIgnoreMask(ServicePermission p) {
-        return ((this.getName().equals("*")) ||
-                this.getName().equals(p.getName()) ||
-                (p.getName().startsWith("@") &&
-                        this.getName().endsWith(p.getName())));
+        String pName = p.getName();
+
+        if ((this.getName().equals("*")) ||
+	     this.getName().equals(p.getName()) ||
+	     (pName.startsWith("@") &&
+	             this.getName().endsWith(pName)))
+            return true;
+
+        /*
+         * Empty realm in this or p is a wild-card.  This is needed to support
+         * non-Kerberos ServicePermissions for GSS (a band-aid until we can
+         * implement a proper GssAcceptorPermission class), but also because
+         * users may not know and might not care what realm the service is in,
+         * especially when they are using a keytab.
+         *
+         * If the user is using a password, then the realm matters more.  An
+         * untrusted actor could cause KDCs for a realm they control to see
+         * material they could attack offline, but that was already the case
+         * anyways, and the answer is the same in all cases: use stronger
+         * passwords, use randomized keys in a keytab, or let us implement
+         * SPAKE or similar alternatives to the venerable PA-ENC-TIMESTAMP.
+         */
+        if ((this.getName().equals("krbtgt/@") &&
+             pName.startsWith("krbtgt/")) ||
+            (pName.equals("krbtgt/@") &&
+             this.getName().startsWith("krbtgt/")))
+            return true;
+
+        String s = this.getName();
+        int n = s.length();
+        int i;
+        for (i = 0; i < n; i++) {
+            if (s.charAt(i) == '\\') {
+                i++;
+                continue;
+            }
+            if (s.charAt(i) == '@') {
+                /*
+                 * This is the same as:
+                 *
+                 *  String s = s.substring(0, i);
+                 *  return (p.getName().startsWith(s) &&
+                 *      (p.getName().equals(s) || this.getName().equals(s)));
+                 */
+                return (pName.regionMatches(0, s, 0, i + 1) &&
+                    (pName.length() == i + 1 || s.length() == i + 1));
+            }
+        }
+
+        // No realm, not even empty -> fail
+        return false;
     }
 
     /**
